#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {space|inode}  {ext3 ext4 ...}

Usage:	 data  space|inode  "ext3 ext4"

Output:   
Disk_Space: {device} {fstype} {mount_point} {free_spcace}M {free_space_pct}%
Inode_Space: {device} {fstype} {mount_point} {free_inode_pct}%

Disk_Space: /dev/mapper/VolGroup-lv_root ext4 / 2949M 45%
Inode_Space: /dev/mapper/VolGroup-lv_root ext4 / 69%
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown | noop }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	action="$2"
	filesystem_fstype="$3"
else
	filesystem_fstype=$( read_eminfo_config disk_fs filesystem_fstype )
	exclude_mpoint=$( read_eminfo_config disk_fs exclude_mpoint )
	disk_spare_space_uplimit=$( read_eminfo_config disk_fs disk_spare_space_uplimit )
	disk_spare_percent_uplimit=$( read_eminfo_config disk_fs disk_spare_percent_uplimit )
	inode_spare_percent_uplimit=$( read_eminfo_config disk_fs inode_spare_percent_uplimit )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${filesystem_fstype}" ] && filesystem_fstype="ext2 ext3 ext4"
[ -z "${exclude_mpoint}" ] && exclude_mpoint=
[ -z "${disk_spare_space_uplimit}" -o ! -z "${disk_spare_space_uplimit//[0-9]}" ] && disk_spare_space_uplimit=10000
[ -z "${disk_spare_percent_uplimit}" -o ! -z "${disk_spare_percent_uplimit//[0-9]}" ] && disk_spare_percent_uplimit=10
[ -z "${inode_spare_percent_uplimit}" -o ! -z "${inode_spare_percent_uplimit//[0-9]}" ] && inode_spare_percent_uplimit=10


# check function here
check(){

  [ -f "/bin/df" -a -x "/bin/df" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="Util: [/bin/df] not prepared.";
        return
  }

  [ -f "/etc/mtab" -a -s "/etc/mtab" ] || {
	EXIT_STATUS=${STATE_UNKNOWN};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="File: [/etc/mtab] not prepared.";
	return
  }

  local result= mpoint= warnnum=0

  result="### Space Check ### "
  for t in `echo "${filesystem_fstype}"`
  do
	mpoint=$(awk '($3~/\<'${t}'\>/){print $1}' "/etc/mtab" 2>&-|tr '\n' ' ')
	for m in `echo "${mpoint}"`
	do
		line=( $(/bin/df -P -T -m "${m}" 2>&- | tail -n +2) )
		if [ "${#line[@]}" != "7" ]; then
			((warnnum++))
			result="${result} $(html_red "filed number [${#line[@]}] <> 7") ###"
			continue
		fi
		if [ "${line[5]//[0-9]}" != "%" ]; then
			((warnnum++))
			result="${result} $(html_red "percent filed [${line[5]}] unrecognized") ###"
			continue
		fi
		if [ "$(echo -e "${exclude_mpoint}"|grep -E -o -w "${line[6]}")" != "" ]; then
			result="${result} ["${line[@]}"] SKIP. as mount point=[${line[6]}] ###"
			continue
		fi

		local device="${line[0]}"  fstype="${line[1]}"  mount="${line[6]}"
		local spare_space="${line[4]}"  spare_pct=$((100-$(echo "${line[5]}"|tr -d '%')))

		# output data and exit if MODE=1
		if [ "${MODE}" == "1" -a "${action}" == "space" ]; then
			echo "Disk_Space: ${device} ${fstype} ${mount} ${spare_space}M ${spare_pct}%"
			continue
		fi

		# check spare space
		if [ "$(echo "${spare_space}<=${disk_spare_space_uplimit}" | bc 2>&-)" == "1" ]; then
			((warnnum++))
			result="${result} $(html_red "${device} -> ${mount} (${fstype}) : spare [${spare_space}M] <= [${disk_spare_space_uplimit}M]") ###"
		else
			result="${result} ${device} -> ${mount} (${fstype}) : spare [${spare_space}M] ###"
		fi

		# check spare space percent
		if [ "$( echo "${spare_pct}<=${disk_spare_percent_uplimit}" | bc 2>&- )" == "1" ]; then
			((warnnum++))
			result="${result} $(html_red "${device} -> ${mount} (${fstype}) : spare [${spare_pct}%] <= [${disk_spare_percent_uplimit}%]") ### "
		else
			result="${result} ${device} -> ${mount} (${fstype}) : spare [${spare_pct}%] ###"
		fi
	done
  done

  result="${result} ### Inode Check ### "
  for t in `echo "${filesystem_fstype}"`
  do
	mpoint=$(awk '($3~/\<'${t}'\>/){print $1}' "/etc/mtab" 2>&-|tr '\n' ' ')
	for m in `echo "${mpoint}"`
	do
		line=( $(/bin/df -P -T -i "${m}" 2>&- | tail -n +2) )
		if [ "${#line[@]}" != "7" ]; then
			((warnnum++))
			result="${result} $(html_red "filed number [${#line[@]}] <> 7") ###"
			continue
		fi
		if [ "${line[5]//[0-9]}" != "%" ]; then
			((warnnum++))
			result="${result} $(html_red "percent filed [${line[5]}] unrecognized") ###"
			continue
		fi
		if [ "$(echo -e "${exclude_mpoint}"|grep -E -o -w "${line[6]}")" != "" ]; then
			result="${result} ["${line[@]}"] SKIP. as mount point=[${line[6]}] ###"
			continue
		fi

		local device="${line[0]}"  fstype="${line[1]}"  mount="${line[6]}"
		local spare_pct=$((100-$(echo "${line[5]}" | tr -d '%')))

        	# output data and exit if MODE=1
        	if [ "${MODE}" == "1" -a "${action}" == "inode" ]; then
                	echo "Inode_Space: ${device} ${fstype} ${mount} ${spare_pct}%"
                	continue
         	fi  

		# check inode spare percent
		if [ "$(echo "${spare_pct}<=${inode_spare_percent_uplimit}" | bc 2>&-)" == "1" ]; then
			((warnnum++))
			result="${result} $(html_red "${device} -> ${mount} (${fstype}) : spare [${spare_pct}%] <= [${inode_spare_percent_uplimit}%]") ###"
		else
			result="${result} ${device} -> ${mount} (${fstype}) : spare [${spare_pct}%] ###"
		fi
	done
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${warnnum}" -gt "0" ] && {
	EXIT_STATUS=${STATE_WARNING};
	LEVEL="warn";
	TYPE="str";
	CONTENT="Disk Space Check WARNING | ${warnnum} check failed.| ${result} "
  } || {
	EXIT_STATUS="${STATE_OK}"
	LEVEL="ok"
	TYPE="str"
	CONTENT="Disk Space Check OK | disk-space, disk-inode check success. | ${result} "
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
