#!/usr/bin/env perl
use warnings;
use strict;
use utf8;
use Smart::Comments;

my %product_info = (
  'manufacturer'	=> '',
  'productname'		=> '',
  'productuuid'		=> '',
  'serialnumber'	=> '',
  'biosvendor'		=> '',
  'biosversion'		=> '',
  'biosreleasedate'	=> '',
  'memmaxcapacity'	=> '',		# Memory Maximum Capacity
  'memmaxdevnum'	=> '',		# Memory Maxinum Plugin Interface
  'memfreedevnum'	=> '',		# Memory Free Plugin Interface
  'meminstallednum'	=> '',		# Memory Installed Number
  'meminstalledsize'	=> '',		# Memory Installed Size (by each)
  'memtype'		=> '',
  'memspeed'		=> '',
);
my $dmidecode = '/usr/sbin/dmidecode';	# dmidecode >= 2.7, [OS >= rhel 5.1]
if (-f $dmidecode && -x $dmidecode) {
  %product_info = (
  	'manufacturer'		=> 'system-manufacturer',
  	'productname'		=> 'system-product-name',
  	'productuuid'		=> 'system-uuid',
  	'serialnumber'		=> 'system-serial-number',
  	'biosvendor'		=> 'bios-vendor',
  	'biosversion'		=> 'bios-version',
  	'biosreleasedate'	=> 'bios-release-date',
	'baseboardmanufacturer'	=> 'baseboard-manufacturer',
	'baseboardproductname'	=> 'baseboard-product-name',
	'baseboardversion'	=> 'baseboard-version',
	'baseboardserialnumber' => 'baseboard-serial-number',
  );
  foreach my $key (keys %product_info) {
    open my $fh, "$dmidecode -s $product_info{$key} 2>&1 |";
    if ($fh) {
	while (<$fh>){
		chomp; $product_info{$key} = $_;
		last;
	}
    }
  }
  open my $fh, "$dmidecode -t memory 2>&1 |";
  if ($fh) {
	my $memdev_start = 0;
	while(<$fh>){
		chomp;
		$memdev_start = 0 if /\A\s*\Z/;
		if (m/\A\s+Maximum\s+Capacity:/) {
			$product_info{'memmaxcapacity'} = (split /:\s+/)[1];
			next;
		}
		if (m/\AMemory Device/) {
			$memdev_start = 1;
			$product_info{'memmaxdevnum'}++;
			next;
		}
		if (m/\A\s+Size:/) {
			(my $size = (split /:/)[1]) =~ s/\A\s*//g;
			if ($size =~ /\d+ MB/) {
				$product_info{'meminstallednum'}++;
				if (!defined $product_info{'meminstalledsize'} || $product_info{'meminstalledsize'} eq '') { 
					$product_info{'meminstalledsize'} = $size;
				}else{
					$product_info{'meminstalledsize'} .= '; '.$size;
				}
			}
			next;
		}
		if (m/\A\s*Type:/) {
			(my $memtype = (split /:/)[1]) =~ s/\A\s*//g;
			if (!defined $product_info{'memtype'} || $product_info{'memtype'} eq '') {
				$product_info{'memtype'} = $memtype;
			} elsif (!grep /\b\Q$memtype\E\b/, $product_info{'memtype'}) {
				$product_info{'memtype'} .= '; '.$memtype;
			}
			next;
		}
		if (m/\A\s*Speed:/) {
			(my $memspeed = (split /:/)[1] ) =~ s/\A\s*//g;
			if (!defined $product_info{'memspeed'} || $product_info{'memspeed'} eq '') {
				$product_info{'memspeed'} = $memspeed;
			} elsif (!grep /\b\Q$memspeed\E\b/, $product_info{'memspeed'}) {
				$product_info{'memspeed'} .= '; '.$memspeed;
			}
			next;
		}
	}
	$product_info{'memfreedevnum'} = $product_info{'memmaxdevnum'} - $product_info{'meminstallednum'};
  }
}
### %product_info



my %cpu_info = (
  'vendor'	=> '',
  'type'	=> '',
  'phy_num'	=> '',
  'log_num'	=> '',
  'speed'	=> '',
);
my $cpu_file = '/proc/cpuinfo';
if (-f $cpu_file && -r $cpu_file) {
  open my $fh, "<", $cpu_file;
  if ($fh) {
	my (%tmp_phy_id, %tmp_speed, %tmp_vendor, %tmp_model);
        while(<$fh>){
                chomp;
		$cpu_info{'log_num'}++ if (m/\Aprocessor\s+/i);
		if (m/\Aphysical\s+id\s+/i) {
			$tmp_phy_id{$_}++;
		}
		if (m/\Acpu\s+MHz\s+/i) {
			(my $speed = (split /:/)[1]) =~ s/\A\s*//g;
			$tmp_speed{$speed.'MHz'}++;
		}
		if (m/\Avendor_id\s+/i) {
			(my $vendor = (split /:/)[1]) =~ s/\A\s*//g;
			$tmp_vendor{$vendor}++;
		}
		if (m/\Amodel\s+name\s+/i) {
			(my $model = (split /:/)[1]) =~ s/\A\s*//g;
			$tmp_model{$model}++;
		}
        }
	$cpu_info{'phy_num'} = scalar(keys %tmp_phy_id);
	$cpu_info{'phy_num'} = 1 if $cpu_info{'phy_num'} == 0;
	foreach my $key (keys %tmp_speed) {
		$cpu_info{'speed'} .= '['.$tmp_speed{$key}.']: '.$key;
	}
	foreach my $key (keys %tmp_vendor) {
		$cpu_info{'vendor'} .= '['.$tmp_vendor{$key}.']: '.$key;
	}
	foreach my $key (keys %tmp_model) {
		$cpu_info{'type'} .= '['.$tmp_model{$key}.']: '.$key;
	}
  }
}
### %cpu_info



my %mem_info = (
  'mem_total'		=> '',
  'swap_total'		=> '',
);
my $mem_file = '/proc/meminfo';
if (-f $mem_file && -r $mem_file) {
  open my $fh, "<", $mem_file;
  if ($fh) {
	while(<$fh>){
		chomp;
		if (m/\AMemTotal:/i) {
			$mem_info{'mem_total'} = int((split /\s+/)[1]/1024).'M';
		}
		if (m/\ASwapTotal:/i) {
			$mem_info{'swap_total'} = int((split /\s+/)[1]/1024).'M';
		}
	}
  }
}
### %mem_info


 
my @input_dev = ();
my $input_devfile = '/proc/bus/input/devices';
if (-f $input_devfile && -r $input_devfile) {
  open my $fh, "<", $input_devfile;
  if ($fh) {
	while(<$fh>){
		chomp;
		if (m/\AN: /i) {
			s/[\"\']//g;
			push @input_dev, (split/=/)[1];
		}
	}
  }
}
### @input_dev




my %raid_info = (
  'raid_vendor'		=> '',
  'raid_memory'		=> '',
  'raid_bbu'		=> '',
  'raid_sid'		=> '',
  'array_group'		=> '',
);
### %raid_info



my %uname_info = (
  'arch'		=> '',
  'os'			=> '',
  'kernel_name'		=> '',
  'kernel_release' 	=> '',
  'hostname'		=> '',
);
my $uname = "/bin/uname";
if (-f $uname && -x $uname) {
  %uname_info = (
  	'arch'			=> '-m',
  	'os'			=> '-o',
  	'kernel_name'		=> '-s',
  	'kernel_release' 	=> '-r',
  	'hostname'		=> '-n',
  );
 foreach my $key (keys %uname_info){
   open my $fh, "$uname $uname_info{$key} 2>&1 |";
   if ($fh) {
	while(<$fh>){
		chomp; $uname_info{$key} = $_;
		last;
	}
   }
 }
}
### %uname_info

my %os_info = (
  'os_distribute'	=> '',
  'os_release'		=> '',
  'os_codename'		=> '',
  'os_descript'		=> '',
  'os_bitmode'		=> '',
);
my $lsb_release = "/usr/bin/lsb_release";
if (-f $lsb_release && -x $lsb_release) {
  open my $fh, "$lsb_release -a 2>&1 |";
  if ($fh) {
	while(<$fh>){
		chomp;
		next if m/\ALSB Version/i;
		my ($key,$value) = split /:/;
		$key = 'os_distribute' if $key =~ /\ADistributor ID/i;
		$key = 'os_release' if $key =~ /\ARelease/i;
		$key = 'os_codename' if $key =~ /\ACodename/i;
		$key = 'os_descript' if $key =~ /\ADescription/i;
		$value =~ s/\A\s*//g;
		$os_info{$key} = $value;
	}
  }
}
my $getconf = "/usr/bin/getconf";
if (-f $getconf && -x $getconf) {
  open my $fh, "$getconf LONG_BIT 2>&1 |";
  if ($fh) {
	while(<$fh>){
		chomp; $os_info{'os_bitmode'} = $_;
	}
  }
}
### %os_info


my %sys_clock = (
  'timezone'		=> '',
  'useutc'		=> '',
);
my $clockfile = '/etc/sysconfig/clock';
if (-f $clockfile && -r $clockfile) {
  open my $fh, "<", $clockfile;
  if ($fh) {
	while(<$fh>){
		chomp;
		if (m/\AZONE=/) {
			s/"//g;
			$sys_clock{'timezone'} = (split/=/)[1];
		}
		if (m/\AUTC=/) {
			$sys_clock{'useutc'} = (split/=/)[1];
		}
	}
  }
}
### %sys_clock

my %selinux = (
  'status'		=> '',
  'type'		=> '',
);
my $selinuxfile = '/etc/selinux/config';
if (-f $selinuxfile && -r $selinuxfile) {
  open my $fh, "<", $selinuxfile;
  if ($fh) {
	while(<$fh>){
		chomp;
		next if /\A\s*#/;
		if (m/\A\s*SELINUX\b/) {
			$selinux{'status'} = (split/=/)[1];
		}
		if (m/\A\s*SELINUXTYPE\b/) {
			$selinux{'type'} = (split/=/)[1];
		}
	}
  }
}
### %selinux

my @sysuser = ();
my $userfile = '/etc/passwd';
if (-f $userfile && -r $userfile) {
  open my $fh, "<", $userfile;
  if ($fh) {
	while(<$fh>){
		chomp;
		my ($name,$uid,$gid,$homedir,$shell) = (split /:/)[0,2,3,5,6];
		if (-e $shell && $shell =~ /sh\Z/) {
			push @sysuser, "name=$name, id=$uid, gid=$gid, homedir=$homedir, shell=$shell";
		}
	}
  }
}
### @sysuser


my $runlevel = '';
my $inittab = '/etc/inittab';
if (-f $inittab && -r $inittab) {
  open my $fh, "<", $inittab;
  if ($fh) {
	while(<$fh>){
		chomp;
		if (m/\Aid:/){
			$runlevel = (split /:/)[1];
			last;
		}
	}
  }
}
### $runlevel



my $systime = '';
my $date = '/bin/date';
if (-f $date && -x $date) {
  open my $fh, "$date +%s 2>&1 |";
  if ($fh) {
	chomp ($systime = <$fh>);
  }
}
### $systime



my %netcard = ();
my $lspci = '/sbin/lspci';
if (-f $lspci && -x $lspci) {
  open my $fh, "$lspci 2>&1 | /bin/grep -i -E \"Ethernet controller:\" | ";
  if ($fh) {
	while(<$fh>){
		chomp;
		my $busid = (split /\s+/)[0];
		my $info = (split /Ethernet controller:\s+/i)[1];
		$netcard{$busid} = $info;
	}
  }
}
my $netcard_num = scalar keys %netcard;
### %netcard
### $netcard_num


my @inet_name = ();
my $netdir = '/etc/sysconfig/network-scripts/';
my $ethtool = '/sbin/ethtool';
my $ifconfig = '/sbin/ifconfig';
if (-d $netdir && -r $netdir) {
  my @netfiles =(glob "$netdir/ifcfg-*" );
  foreach(@netfiles){
	chomp;
	next if m/(~|\.bak|\.orig|\.rpmnew|\.rpmorig|\.rpmsave)\Z/; 
	next if m/(ifcfg-lo|:|ifcfg-.*-range)/;
	my $inet_name = (split/\//)[-1];
  	$inet_name =~ s/\Aifcfg-//g if $inet_name;
	my %inet_info = (
		'name'			=> $inet_name,
		'speed'			=> '',
		'duplex'		=> '',
		'is_autoneg'		=> '',
		'is_linked'		=> '',
		'driver'		=> '',
		'driver_version'	=> '',
		'firmware_version'	=> '',
		'pci_busid'		=> '',
		'pci_description'	=> '',
		'encapsulation'		=> '',
		'mac_address'		=> '',
		'ipv4_address'		=> '',
		'ipv4_netmask'		=> '',
		'mtu'			=> '',
		'promisc_mode'		=> 'off',
	);
	if (-f $ethtool && -x $ethtool) {
		open my $fh, "$ethtool $inet_name 2>&1 | ";
		if ($fh) {
			while(<$fh>){
				chomp;
				$inet_info{'speed'} = (split/:\s+/)[1] if m/\A\s*Speed:/;
				$inet_info{'duplex'} = (split/:\s+/)[1] if m/\A\s*Duplex:/;
				$inet_info{'is_autoneg'} = (split/:\s+/)[1] if m/\A\s*Auto-negotiation:/;
				$inet_info{'is_linked'} = (split/:\s+/)[1] if m/\A\s*Link detected:/;
			}
		}
		open my $fh1, "$ethtool -i $inet_name 2>&1 | ";
		if ($fh1) {
			while(<$fh1>){
				chomp;
				$inet_info{'driver'} = (split/:\s+/)[1] if m/\A\s*driver:/;
				$inet_info{'driver_version'} = (split/:\s+/)[1] if m/\A\s*version:/;
				$inet_info{'firmware_version'} = (split/:\s+/)[1] if m/\A\s*firmware-version:/;
				$inet_info{'firmware_version'} = '' if not defined($inet_info{'firmware_version'});
				$inet_info{'pci_busid'} = (split/:\s+/)[1] if m/\A\s*bus-info:/;
			}
			if (not defined ($inet_info{'pci_busid'})) {
				$inet_info{'pci_busid'} = '';
			} else {
				$inet_info{'pci_busid'} =~ s/\A(.+?)://;	# trim first xxxx:
				if (exists $netcard{$inet_info{'pci_busid'}}) {
					$inet_info{'pci_description'} = $netcard{$inet_info{'pci_busid'}};
				}
			}
		}
	}
	if (-f $ifconfig && -x $ifconfig) {
		open my $fh, "$ifconfig $inet_name 2>&1 | ";
		if ($fh) {
			while(<$fh>){
				chomp;
				if(m/^$inet_name\s+Link encap:(\w+)\s+HWaddr ((?:[A-Fa-f0-9]{2}:){5}(?:[A-Fa-f0-9]{2}))\s*\Z/){
					$inet_info{'encapsulation'} = $1;			
					$inet_info{'mac_address'} = $2;
				}
				if(m/\s+inet addr:((([0-9]|([1-9]\d)|(1\d\d)|(2([0-4]\d|5[0-5])))\.){3}([1-9]|([1-9]\d)|(1\d\d)|(2([0-4]\d|5[0-5]))))\s+(.*)Mask:(.+)\Z/){
					$inet_info{'ipv4_address'} = $1;
					$inet_info{'ipv4_netmask'} = $14;
				}
				if(m/\s+MTU:(\d+)\s+/){
					$inet_info{'mtu'} = $1;
				}
			}
		}
	}
	my $flagfile = "/sys/class/net/$inet_name/flags";
	if (-f $flagfile && -r $flagfile) {
		open my $fh, "<", $flagfile;
		if ($fh) {
			chomp( my $int_flags = <$fh>);
			if(hex $int_flags & 0x100) {
				$inet_info{'promisc_mode'} = 'on';
			}
		}
	}
	push @inet_name, \%inet_info;
  }
}
### @inet_name

__END__
# smartctl -i /dev/sda
# cat /proc/scsi/scsi     
