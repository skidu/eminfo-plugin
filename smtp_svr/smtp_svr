#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Net::SMTP;
use Encode;
use Time::HiRes;
use Benchmark ':hireswallclock';
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");

# return codes
our ($state_ok,$state_warn,$state_crit,$state_unkn,$state_noop) = (0,1,2,3,4);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# read plugin config here
our $addr_port = `eminfo v $filename addr_port`;
if ($? != 0) {
  $addr_port = '127.0.0.1:25';
} else {
  chomp $addr_port;
}

our $time_out = `eminfo v $filename time_out`;
if ($? != 0) {
  $time_out = 10;
} else {
  chomp $time_out;
  $time_out = 10 unless $time_out;
  $time_out = 10 if $time_out =~ m/\D/;
}

our $smtp_user = `eminfo v $filename smtp_user`;
if ($? != 0) {
  $smtp_user = '';
} else {
  chomp $smtp_user;
}

our $smtp_pass = `eminfo v $filename smtp_pass`;
if ($? != 0) {
  $smtp_pass = '';
} else {
  chomp $smtp_pass;
}

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = "check list: $addr_port ### ### ";

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($smtp_host, $smtp_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $smtp_host || !defined $smtp_port) {
	$result .= "<font color=yellow> smtp_host or smtp_port not defined </font> ### ### ";
	$unknnum++;
	next;
  }
  if ($smtp_port =~ /\D/) {
	$result .= "<font color=yellow> $smtp_host:$smtp_port smtp port not numberic </font> ### ### ";
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $smtp=Net::SMTP->new(
	Host    =>	$smtp_host,
	Port	=> 	$smtp_port,
	Timeout =>	($time_out =~ /\D/)?10:$time_out,
	# Hello   =>      'bbklab.hello',
  );
  unless (defined $smtp) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		$@ = Encode::decode("gb2312",$@);
		$result .= "<font color=red> connect [$smtp_host:$smtp_port] failed in $time_out seconds, return [$@] </font> ";
	} else {
		$result .= "<font color=red> connect [$smtp_host:$smtp_port] failed in $time_out seconds, maybe in black ip list </font> ";
	}
	$critnum++;
	goto ERREND;
  } else {
	(my $welcome = $smtp->banner()) =~ s/[\r\n]//g;
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= "connect [$smtp_host:$smtp_port] return welcome banner: ### [$welcome] ($time_duration seconds) ### ";
	$time_start = Benchmark->new();		## reset time_start
  }
  if($smtp_user && $smtp_pass) {
	my ($rcode,$response);
	$smtp->auth($smtp_user,$smtp_pass);
	($response = $smtp->message()) =~ s/[\r\n]//g;
	$response = Encode::decode("gb2312",$response);
	$rcode = $smtp->code();
	unless (defined $rcode && $rcode =~ m/\A2/) {
		$rcode = '' if (!defined $rcode);
		$result .= "<font color=red> smtp command: AUTH LOGIN return [code=$rcode message=$response] </font> ";
		$critnum++;
		goto ERREND;
	} else {
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= "smtp command: AUTH LOGIN return [code=$rcode message=$response] ($time_duration seconds) ### ### ";
		$time_start = Benchmark->new();         ## reset time_start
	}
  } else {
	$result .= " smtp_user or smtp_pass not defined, smtp login test skip ### ### ";
  }
  next;

  ERREND: {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= " ($time_duration seconds) ### ### ";
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  print "{crit}:{str}:{ SMTP SVR CRITICAL | $critnum/$total smtp check critical | $result }";
  exit $state_crit;
} elsif ($unknnum > 0) {
  print "{unknown}:{str}:{ SMTP SVR UNKNOWN | $unknnum/$total smtp check unknown | $result }";
  exit $state_unkn;
} else {
  print "{ok}:{str}:{ SMTP SVR OK | $total/$total smtp check success | $result }";
  exit $state_ok;
}
