#!/usr/bin/env perl
use warnings;
use strict;
use utf8;
# use Smart::Comments;

my %product_info = (
  'manufacturer'	=> '',
  'productname'		=> '',
  'productuuid'		=> '',
  'serialnumber'	=> '',
  'biosvendor'		=> '',
  'biosversion'		=> '',
  'biosreleasedate'	=> '',
  'memmaxcapacity'	=> '',		# Memory Maximum Capacity
  'memmaxdevnum'	=> '',		# Memory Maxinum Plugin Interface
  'memfreedevnum'	=> '',		# Memory Free Plugin Interface
  'meminstallednum'	=> '',		# Memory Installed Number
  'meminstalledsize'	=> '',		# Memory Installed Size (by each)
);
my $dmidecode = '/usr/sbin/dmidecode';
if (-f $dmidecode && -x $dmidecode) {
  %product_info = (
  	'manufacturer'		=> 'system-manufacturer',
  	'productname'		=> 'system-product-name',
  	'productuuid'		=> 'system-uuid',
  	'serialnumber'		=> 'system-serial-number',
  	'biosvendor'		=> 'bios-vendor',
  	'biosversion'		=> 'bios-version',
  	'biosreleasedate'	=> 'bios-release-date',
  );
  foreach my $key (keys %product_info) {
    open my $fh, "$dmidecode -s $product_info{$key} 2>&1 |";
    if ($fh) {
	while (<$fh>){
		chomp; $product_info{$key} = $_;
		last;
	}
    }
  }
  open my $fh, "$dmidecode -t memory 2>&1 |";
  if ($fh) {
	my $memdev_start = 0;
	while(<$fh>){
		chomp;
		$memdev_start = 0 if /\A\s*\Z/;
		if (m/\A\s+Maximum\s+Capacity:/) {
			$product_info{'memmaxcapacity'} = (split /:/)[1];
			$product_info{'memmaxcapacity'} =~ s/\A\s*//g;
		}
		if (m/\AMemory Device/) {
			$memdev_start = 1;
			$product_info{'memmaxdevnum'}++;
		}
		if (m/\A\s+Size:/) {
			(my $size = (split /:/)[1]) =~ s/\A\s*//g;
			if ($size =~ /\d+ MB/) {
				$product_info{'meminstallednum'}++;
				$product_info{'meminstalledsize'} .= $size.', ';
			}
		}
	}
	$product_info{'memfreedevnum'} = $product_info{'memmaxdevnum'} - $product_info{'meminstallednum'};
  }
}
### %product_info

my %uname_info = (
  'arch'		=> '',
  'os'			=> '',
  'kernel_name'		=> '',
  'kernel_release' 	=> '',
  'hostname'		=> '',
);
my $uname = "/bin/uname";
if (-f $uname && -x $uname) {
  %uname_info = (
  	'arch'			=> '-m',
  	'os'			=> '-o',
  	'kernel_name'		=> '-s',
  	'kernel_release' 	=> '-r',
  	'hostname'		=> '-n',
  );
 foreach my $key (keys %uname_info){
   open my $fh, "$uname $uname_info{$key} 2>&1 |";
   if ($fh) {
	while(<$fh>){
		chomp; $uname_info{$key} = $_;
		last;
	}
   }
 }
}
### %uname_info

my %os_info = (
  'os_distribute'	=> '',
  'os_release'		=> '',
  'os_codename'		=> '',
  'os_descript'		=> '',
  'os_bitmode'		=> '',
);
my $lsb_release = "/usr/bin/lsb_release";
if (-f $lsb_release && -x $lsb_release) {
  open my $fh, "$lsb_release -a 2>&1 |";
  if ($fh) {
	while(<$fh>){
		chomp;
		next if m/\ALSB Version/i;
		my ($key,$value) = split /:/;
		$key = 'os_distribute' if $key =~ /\ADistributor ID/i;
		$key = 'os_release' if $key =~ /\ARelease/i;
		$key = 'os_codename' if $key =~ /\ACodename/i;
		$key = 'os_descript' if $key =~ /\ADescription/i;
		$value =~ s/\A\s*//g;
		$os_info{$key} = $value;
	}
  }
}
my $getconf = "/usr/bin/getconf";
if (-f $getconf && -x $getconf) {
  open my $fh, "$getconf LONG_BIT 2>&1 |";
  if ($fh) {
	while(<$fh>){
		chomp; $os_info{'os_bitmode'} = $_;
	}
  }
}
### %os_info

my %mem_info = (
  'mem_total'		=> '',
  'swap_total'		=> '',
);
my $mem_file = '/proc/meminfo';
if (-f $mem_file && -r $mem_file) {
  open my $fh, "<", $mem_file;
  if ($fh) {
	while(<$fh>){
		chomp;
		if (m/\AMemTotal:/i) {
			$mem_info{'mem_total'} = int((split /\s+/)[1]/1024).'M';
		}
		if (m/\ASwapTotal:/i) {
			$mem_info{'swap_total'} = int((split /\s+/)[1]/1024).'M';
		}
	}
  }
}
### %mem_info
 
my @input_dev = ();
my $input_devfile = '/proc/bus/input/devices';
if (-f $input_devfile && -r $input_devfile) {
  open my $fh, "<", $input_devfile;
  if ($fh) {
	while(<$fh>){
		chomp;
		if (m/\AN: /i) {
			push @input_dev, (split/=/)[1];
		}
	}
  }
}
### @input_dev

my %cpu_info = (
  'vendor'	=> '',
  'type'	=> '',
  'phy_num'	=> '',
  'log_num'	=> '',
  'speed'	=> '',
);
my $cpu_file = '/proc/cpuinfo';
if (-f $cpu_file && -r $cpu_file) {
  open my $fh, "<", $cpu_file;
  if ($fh) {
	my (%tmp_phy_id, %tmp_speed, %tmp_vendor, %tmp_model);
        while(<$fh>){
                chomp;
		$cpu_info{'log_num'}++ if (m/\Aprocessor\s+/i);
		if (m/\Aphysical\s+id\s+/i) {
			$tmp_phy_id{$_}++;
		}
		if (m/\Acpu\s+MHz\s+/i) {
			(my $speed = (split /:/)[1]) =~ s/\A\s*//g;
			$tmp_speed{$speed.'MHz'}++;
		}
		if (m/\Avendor_id\s+/i) {
			(my $vendor = (split /:/)[1]) =~ s/\A\s*//g;
			$tmp_vendor{$vendor}++;
		}
		if (m/\Amodel\s+name\s+/i) {
			(my $model = (split /:/)[1]) =~ s/\A\s*//g;
			$tmp_model{$model}++;
		}
        }
	$cpu_info{'phy_num'} = scalar(keys %tmp_phy_id);
	$cpu_info{'phy_num'} = 1 if $cpu_info{'phy_num'} == 0;
	foreach my $key (keys %tmp_speed) {
		$cpu_info{'speed'} .= '['.$tmp_speed{$key}.']: '.$key;
	}
	foreach my $key (keys %tmp_vendor) {
		$cpu_info{'vendor'} .= '['.$tmp_vendor{$key}.']: '.$key;
	}
	foreach my $key (keys %tmp_model) {
		$cpu_info{'type'} .= '['.$tmp_model{$key}.']: '.$key;
	}
  }
}
### %cpu_info

my %raid_info = (
  'raid_vendor'		=> '',
  'raid_memory'		=> '',
  'raid_bbu'		=> '',
  'raid_sid'		=> '',
  'array_group'		=> '',
);
### %raid_info

my %inet_info = (
  'inet_num'		=> '',
  'inet_driver'		=> '',
  'inet_vendor'		=> '',
  'inet_speed'		=> '',
  'inet_mode'		=> '',
  'inet_mac'		=> '',
  'inet_link'		=> '',
  'inet_ip'		=> '',
);
### %inet_info
