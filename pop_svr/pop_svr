#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Net::POP3;
use Time::HiRes;
use Benchmark ':hireswallclock';
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");

# return codes
our ($state_ok,$state_warn,$state_crit,$state_unkn,$state_noop) = (0,1,2,3,4);

# return stuff
our ($rc, $result) = (0,'');

our $filename = (split /\//, __FILE__)[-1];

# read plugin config here
our $addr_port = `eminfo v $filename addr_port`;
if ($? != 0) {
  $addr_port = '127.0.0.1:110';
} else {
  chomp $addr_port;
}

our $time_out = `eminfo v $filename time_out`;
if ($? != 0) {
  $time_out = 10;
} else {
  chomp $time_out;
  $time_out = 10 unless $time_out;
  $time_out = 10 if $time_out =~ m/\D/;
}

our $pop_user = `eminfo v $filename pop_user`;
if ($? != 0) {
  $pop_user = '';
} else {
  chomp $pop_user;
}

our $pop_pass = `eminfo v $filename pop_pass`;
if ($? != 0) {
  $pop_pass = '';
} else {
  chomp $pop_pass;
}

# Main body begin
my ($total,$critnum,$unknnum) = (0,0,0);
my ($time_start,$time_stop,$time_duration);

$result = "check list: $addr_port ### ### ";

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  $total++;
  my ($pop_host, $pop_port) = (split /:/, shift @addr_pair)[0,1];
  if (!defined $pop_host || !defined $pop_port) {
	$result .= "<font color=yellow> pop_host or pop_port not defined </font> ### ### ";
	$unknnum++;
	next;
  }
  if ($pop_port =~ /\D/) {
	$result .= "<font color=yellow> $pop_host:$pop_port pop port not numberic </font> ### ### ";
	$unknnum++;
	next;
  }

  $time_start = Benchmark->new();
  my $pop=Net::POP3->new(
	Host    =>	$pop_host,
	Port	=> 	$pop_port,
	Timeout =>	($time_out =~ /\D/)?10:$time_out,
  );
  unless (defined $pop) {
	$result .= "<font color=red> connect [$pop_host:$pop_port] failed in $time_out seconds, return [$@] </font> ";
	$critnum++;
	goto ERREND;
  } else {
	(my $welcome = $pop->banner()) =~ s/[\r\n]//g;
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= "connect [$pop_host:$pop_port] return welcome banner: ### [$welcome] ($time_duration seconds) ### ";
	$time_start = Benchmark->new();		## reset time_start
  }
  if($pop_user && $pop_pass) {
	my ($rcode,$response);
	$pop->user($pop_user);
	($response = $pop->message()) =~ s/[\r\n]//g;
	$rcode = $pop->code();
	unless (defined $rcode && $rcode =~ m/\A2/) {
		$rcode = '' if (!defined $rcode);
		$result .= "<font color=red> pop command: USER return [code=$rcode message=$response] </font> ";
		$critnum++;
		goto ERREND;
	} else {
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= "pop command: USER return [code=$rcode message=$response] ($time_duration seconds) ### ";
		$time_start = Benchmark->new();         ## reset time_start
	}
	$pop->pass($pop_pass);
	($response = $pop->message()) =~ s/[\r\n]//g;
	$rcode = $pop->code();
	unless (defined $rcode && $rcode =~ m/\A2/) {
		$rcode = '' if (!defined $rcode);
		$result .= "<font color=red> pop command: PASS return [code=$rcode message=$response] </font> ";
		$critnum++;
		goto ERREND;
	} else {
		$time_stop = Benchmark->new();
		$time_duration = timestr(timediff($time_stop,$time_start),'noc');
		$time_duration = (split /\s+/, $time_duration )[0];
		$result .= "pop command: PASS return [code=$rcode message=Authorized Success] ($time_duration seconds) ### ### ";
		$time_start = Benchmark->new();         ## reset time_start
	}
  } else {
	$result .= " pop_user or pop_pass not defined, pop login test skip ### ### ";
  }
  next;

  ERREND: {
	$time_stop = Benchmark->new();
	$time_duration = timestr(timediff($time_stop,$time_start),'noc');
	$time_duration = (split /\s+/, $time_duration )[0];
	$result .= " ($time_duration seconds) ### ### ";
	next;
  }
}
# prepare last output
if ($critnum > 0) {
  print "{crit}:{str}:{ POP SVR CRITICAL | $critnum/$total pop check critical | $result }";
  exit $state_crit;
} elsif ($unknnum > 0) {
  print "{unknown}:{str}:{ POP SVR UNKNOWN | $unknnum/$total pop check unknown | $result }";
  exit $state_unkn;
} else {
  print "{ok}:{str}:{ POP SVR OK | $total/$total pop check success | $result }";
  exit $state_unkn;
}
