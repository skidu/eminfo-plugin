#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {addr_port}  {tmout}
{addr_port} format:
  [http|https]:ip:port

Usage:   data  "http:127.0.0.1:80  https:mail.eyou.net:443"  10

Output:   
{addr}:{port}  {http_code} {time_total}s {size_download}Bytes

127.0.0.1:80 200 0.008s 12Bytes
mail.eyou.net:443 200 0.108s 24736Bytes
EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown | noop }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
        addr_port="$2"
	time_out="$3"
else   
	addr_port=$( read_eminfo_config http_svr addr_port )
	time_out=$( read_eminfo_config http_svr time_out )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${addr_port}" ] && addr_port="http:127.0.0.1:80"
[ -z "${time_out}" -o ! -z "${time_out//[0-9]}" ] && time_out=10

# check function here
check(){
  [ -f "/usr/bin/curl" -a -x "/usr/bin/curl" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="utilite [/usr/bin/curl] not prepared."
        return
  }

  local total=  err_num=0  result=
  for x in `echo "${addr_port}"`;
  do
	local addr=  port=  str1=  str2=
	prot=$(echo "${x}" | awk -F: '{print $1}')
	addr=$(echo "${x}" | awk -F: '{print $2}')
	port=$(echo "${x}" | awk -F: '{print $NF}')
	[ "${prot}" == "https" ] && {
	arr=($(curl -s -k -o /dev/null -w "%{http_code} %{time_total}s %{size_download}Bytes" "${prot}://${addr}:${port}" 2>&1))
	}
	[ "${prot}" == "http" ] && {
	arr=($(curl -s -o /dev/null -w "%{http_code} %{time_total}s %{size_download}Bytes" "${prot}://${addr}:${port}" 2>&1))
	}
	# output data and exit if MODE=1
	[ "${MODE}" == "1" ] && {
		echo "${addr}:${port} ${arr[*]}"
		continue
	}
  	if [ "${arr[0]}" == "200" ]; then
		result=" ${result} check [${x}] return [code=${arr[0]}, time=${arr[1]}, pagesize=${arr[2]}] ### "
  	else
		((err_num++))
		result=" ${result} $(html_red "check [${x}] return [code=${arr[0]}, time=${arr[1]}, pagesize=${arr[2]}]") ### "
  	fi
	((total++))
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit

  [ "${err_num}" == "0" ] && {
	EXIT_STATUS=${STATE_OK};
	LEVEL="ok";
	TYPE="str";
	CONTENT="HTTP SVR OK | ${total}/${total} http check success. | "${result}" "
  } || {
	EXIT_STATUS=${STATE_CRITICAL};
	LEVEL="crit";
	TYPE="str";
	CONTENT="HTTP SVR CRITICAL | ${err_num}/${total} http check failed. | "${result}" "
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
