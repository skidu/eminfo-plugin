#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {}

Usage:  

Output:

EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Set Default
EXIT_STATUS=0
LEVEL=""        ### { ok | warn | crit | unknown | noop }
TYPE=""         ### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
mysqldump_path=$(read_eminfo_config mysql_dump mysqldump_path)
mysql_conn_conf=$(read_eminfo_config mysql_dump mysql_conn_conf)
mysql_dump_tables=$(read_eminfo_config mysql_dump mysql_dump_tables)
dump_savedir=$(read_eminfo_config mysql_dump savedir)

# if null or invalid set default.

# check function here
check() {

  [ -z "${mysqldump_path}" ] && {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="mysqldump_path: not defined."
        return
  }
 
  [ -z "${dump_savedir}" ] && {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="dump_savedir: not defined."
        return
  }
  
  [ -f "${mysqldump_path}" -a -x "${mysqldump_path}" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="utitile [${mysqldump_path}] not prepared."
        return
  }

  [ -d "${dump_backdir}" -a -w "${dump_backdir}" ] || {
	EXIT_STATUS=${STATE_UNKNOWN}
	LEVEL="unknown"
	TYPE="str"
	CONTENT="directory: [${dump_savedir}] not exist or accessable"
	return
  }

  sepnum=$(echo -e "${mysql_conn_conf}" | awk -F"," 'END{print --NF}')
  [ "${sepnum}" == "3" ] || {
	EXIT_STATUS=${STATE_UNKNOWN}
	LEVEL="unknown"
	TYPE="str"
	CONTENT="mysql_conn_conf: [${mysql_conn_conf}] is invalid"
	return
  }

  mysql_host="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $1}')"
  mysql_port="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $2}')"
  mysql_user="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $3}')"
  mysql_pass="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $4}')"

  local result=
  result="dump tables from mysql [${mysql_host}:${mysql_port}] with user [${mysql_user}] by [${mysqldump_path}] ### ### "

  if [ -z "${mysql_pass}" ]; then
	cmd="${mysqldump_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -q --dump-date "
  else
	cmd="${mysqldump_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -p"${mysql_pass}" -q --dump-date "
  fi  

  dirpath="${dump_savedir}/$(date +%Y%m%d_%H%M%S)"
  errstr= rc=
  errstr=$( /bin/mkdir -p ${dirpath} 2>&1 1>/dev/null )
  rc=$?
  errstr=$( echo -e "${errstr}" | tr -d '\r\n' )
  if [ "${rc}" != 0 ]; then 
	EXIT_STATUS=${STATE_CRITICAL};
	LEVEL="crit";
	TYPE="str";
	CONTENT="Mysql Dump BackUp CRITICAL | create backup directory failed | ${errstr} "
	return
  fi

  if [ -f "/${mysql_dump_tables##*file:}" -a -s "/${mysql_dump_tables##*file:}" ]; then
	dbtb_file="/${mysql_dump_tables##*file:}"
  elif [ -f "${BASE_DIR}/${mysql_dump_tables##*file:}" -a -s "${BASE_DIR}/${mysql_dump_tables##*file:}" ]; then
	dbtb_file="${BASE_DIR}/${mysql_dump_tables##*file:}"
  fi
  if [ -f "${dbtb_file}" ]; then
	dblst="$(/bin/awk '($0~/^ *\[ *.* *\] *$/)' "${dbtb_file}" 2>&- | tr -d '[\[\]\t\r ]')"
	for dbname in ${dblst}
	do
		dbtb_tmp=$( awk -v db=${dbname} '\
				($0~/^ *\[ *'${dbname}' *\] *$/){k=1;x=1;next}\
				(x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${dbname}' *\] *$/ ){exit;}\
				( k==1 && x==1 ){printf "%s %s ",db,$0;}'  "${dbtb_file}" 2>&- )
		array_dbtb_list=( ${array_dbtb_list}  ${dbtb_tmp} )
	done
  else
	array_dbtb_list=( $( echo -e "${mysql_dump_tables}" | tr -s "." " " )  )
  fi

  local oknum=0 errnum=0 unknum=0 total=0
  for ((i=0;i<${#array_dbtb_list[*]};i++))
  do
	if [ "$(( ${i}%2 ))" == "1" ]; then
		((tbnum++))
		db="${array_dbtb_list[$i-1]}"  tb="${array_dbtb_list[$i]}"
		errstuff=$( ${cmd} ${db} ${tb} 2>&1 1>${dirpath}/${db}.${tb}.sql )
		[ "$?" != "0" ] && {
			((errnum++))
			result="${result} $(html_red "Dump Table [${db}.${tb}] return [${errstuff}]") ###"
		} || {
			((succnum++))
			dt_size=$(/usr/bin/du -sk ${dirpath}/${db}.${tb}.sql 2>&- | awk '{print $1;exit;}')
			result="${result} Dump Table [${db}.${tb}] succeed. size=[${dt_size}]K ###"
		}
	else
		continue
	fi
  done

  [ "${errnum}" != "0" ] && {
	EXIT_STATUS=${STATE_CRITICAL};
	LEVEL="crit";
	TYPE="str";
	CONTENT="Mysql Dump BackUp CRITICAL | ${errnum}/${tbnum} tables backup failed. | ${result} "
  } || {
	EXIT_STATUS=${STATE_OK};
  	LEVEL="ok";
  	TYPE="str";
	CONTENT="Mysql Dump BackUp OK | ${succnum}/${tbnum} tables backup successfully. | ${result} "
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
