#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

show_help(){
cat <<EOF
Arguments:   {d|data|h|help}

Usage	 :   data

Output   :   {devpath} -> {mpoint} : %{util}
Example  :   
/dev/sda1 -> /boot : 0.006%
/dev/mapper/VolGroup-lv_root -> / : 81.08%
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown | noop }
TYPE=    	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	dev_list=$2
else
	dev_list=$( read_eminfo_config disk_iostat dev_list )
	util_uplimit=$( read_eminfo_config disk_iostat util_uplimit )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${util_uplimit}" -o ! -z "${util_uplimit//[0-9]}" ] && util_uplimit=50

# check function here
check(){

  if [ -z "${dev_list}" ]; then
	EXIT_STATUS=${STATE_UNKNOWN};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="config {dev_list} empty, nothing to do.";
	return
  fi

  if [ ! -x "/usr/bin/iostat" ]; then
	EXIT_STATUS=${STATE_UNKNOWN};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="Util: [/usr/bin/iostat] not prepared.";
	return
  fi

  # collect data
  local iostat_data=$( /usr/bin/iostat -d -x ${dev_list} 1 5 2>&1 )
  
  oknum=0 warnnum=0 result=
  for dev in ${dev_list}
  do
	# skip device that not exists
	[ -e "${dev}" ] || continue

	if [ -L "${dev}" ]; then	# in case of lvm
		dev_tmpname="$(/bin/readlink ${dev} 2>&-)"
		devname="${dev_tmpname##*/}"
	else
		devname="${dev##*/}"
	fi

	util=$( echo -e "${iostat_data}" | /bin/awk '($1~/^'${devname}'\>/){x+=$NF} END{print x/5}' 2>&- )
	[ -z "${util}" -o ! -z "${util//[0-9.]}" ] && util=0

	mpoint=$( /bin/awk -v d="${dev}" '($1==d){print $2}' /etc/mtab 2>&- )
	[ -z "${mpoint}" ] && mpoint="NULL"

  	# output data and exit if MODE=1
  	[ "${MODE}" == "1" ] && {
		echo "${dev} -> ${mpoint} : ${util}%"
		continue
  	}

  	if [ "$(echo  "${util} >= ${util_uplimit}" | bc 2>&-)" == "1" ]; then
		((warnnum++))
		result="${result} $(html_red "${dev} (${mpoint}) io busy percent: [${util}%] >= uplimit: [${util_uplimit}%]") ###"
  	else
		((oknum++))
		result="${result} ${dev} (${mpoint}) io busy percent: [${util}%] <= uplimit: [${util_uplimit}%] ###"
  	fi
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit

  if [ ${warnnum} -gt 0 ]; then
	EXIT_STATUS=${STATE_WARNING};
	LEVEL="warn";
	TYPE="str";
	CONTENT="IOStat Check WARNING | ${warnnum}/$((${warnnum}+${oknum})) check failed. | ${result}"
  else
	EXIT_STATUS=${STATE_OK};
	LEVEL="ok";
	TYPE="str";
	CONTENT="IOStat Cehck OK | ${oknum}/$((${warnnum}+${oknum})) check success. | ${result}"
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
