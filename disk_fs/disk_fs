#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {fs|io}  {ext3 ext4 ...}

Usage:	 data  fs|io  "ext3 ext4"

Output:   
FS_Stat: {device} {fstype} {stat}
Disk_IO: {device} {fstype} {success|warn} {io-result}

FS_Stat: /dev/mapper/VolGroup-lv_root ext4 clean
FS_Stat: /dev/sda1 ext4 clean
Disk_IO: / ext4 success
Disk_IO: /boot ext4 success
EOF
exit 0;
}
MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown | noop }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
if [ "${MODE}" == "1" ]; then
	action="$2"
	filesystem_fstype="$3"
else
	filesystem_fstype=$( read_eminfo_config disk_fs filesystem_fstype )
fi

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${filesystem_fstype}" ] && filesystem_fstype="ext2 ext3 ext4"

# check function here
check(){

  [ -f "/sbin/tune2fs" -a -x "/sbin/tune2fs" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="Util: [/sbin/tune2fs] not prepared.";
        return
  }

  [ -f "/etc/mtab" -a -s "/etc/mtab" ] || {
	EXIT_STATUS=${STATE_UNKNOWN};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="File: [/etc/mtab] not prepared.";
	return
  }

  local result= mpoint= warnnum=0  unknnum=0

  result="FSTYPE: [${filesystem_fstype}] ### ###"
  result="${result} ### FileSystem Stat ### "
  for t in `echo "${filesystem_fstype}"`
  do
	devices=$(awk '($3~/\<'${t}'\>/){print $1}' "/etc/mtab" 2>&-|tr '\n' ' ')
  	for d in `echo "${devices}"`
  	do
		stat=$(/sbin/tune2fs -l "${d}" | awk -F: '($1~/Filesystem state/){gsub(" ","",$2);print $2;exit}')
		# output data and exit if MODE=1
		[ "${MODE}" == "1" -a "${action}" == "fs" ] && {
			echo "FS_Stat: ${d} ${t} ${stat}"
			continue
		}
		if [ -z "${stat}" ]; then
			result="${result} (${t}) ${d} -> unknown ### ";
			((unknnum++))
		elif [ "${stat}" == "clean" ]; then
			result="${result} (${t}) ${d} -> clean ###"
		else
			((warnnum++))
			result="${result} $(html_red "(${t}) ${d} -> ${stat}") ###"
		fi
  	done
  done

  result="${result} ### IO Test ###"
  for t in `echo "${filesystem_fstype}"`
  do  
        mpoint=$(awk '($3~/\<'${t}'\>/){print $2}' "/etc/mtab" 2>&-|tr '\n' ' ')
        for m in `echo "${mpoint}"`
        do  
                ioerr=$(/bin/touch "${m}/.disk_fs.iotest" 2>&1 1>/dev/null | tr -d '\r\n')
  		rc=$?
                # output data and exit if MODE=1
                [ "${MODE}" == "1" -a "${action}" == "io" ] && {
			if [ "${rc}" == "0" ]; then
                        	echo "Disk_IO: ${m} ${t} success"
			else
				((warnnum++))
				echo "Disk_IO: ${m} ${t} warn \"${ioerr}\""
			fi
                        continue
                }   
                if [ "${rc}" == "0" ]; then
                        result="${result} (${t}) ${m} -> iotest Success ### "
                else
                        result="${result} $(html_red "(${t}) ${m} -> iotest warning: ${ioerr}") ### "
			((warnnum++))
                fi  
        done
  done

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${warnnum}" -gt "0" ] && {
	EXIT_STATUS=${STATE_WARNING};
	LEVEL="warn";
	TYPE="str";
	CONTENT="IO/FS Check WARNING | ${warnnum} check failed | ${result} "
  } || {
	[ "${unknnum}" -gt "0" ] && {
		EXIT_STATUS=${STATE_UNKNOWN};
		LEVEL="unknown";
		TYPE="str";
		CONTENT="IO/FS Check UNKNOWN | ${unknnum} check unknown | ${result} "
	} || {
		EXIT_STATUS="${STATE_OK}"
		LEVEL="ok"
		TYPE="str"
		CONTENT="IO/FS Check OK | fsstat,iotest check success | ${result} "
	}
  }
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
